[{"path":[]},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [INSERT CONTACT METHOD]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://tidymodels.github.io/brulee/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://tidymodels.github.io/brulee/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 RStudio Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://tidymodels.github.io/brulee/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Max Kuhn. Author, maintainer. Daniel Falbel. Author. . Copyright holder.","code":""},{"path":"https://tidymodels.github.io/brulee/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuhn M, Falbel D (2022). brulee: High-Level Modeling Functions 'torch'. https://github.com/tidymodels/brulee, https://tidymodels.github.io/brulee/.","code":"@Manual{,   title = {brulee: High-Level Modeling Functions with 'torch'},   author = {Max Kuhn and Daniel Falbel},   year = {2022},   note = {https://github.com/tidymodels/brulee, https://tidymodels.github.io/brulee/}, }"},{"path":"https://tidymodels.github.io/brulee/index.html","id":"brulee","dir":"","previous_headings":"","what":"High-Level Modeling Functions with torch","title":"High-Level Modeling Functions with torch","text":"R brulee package contains several basic modeling functions use torch package infrastructure, : neural networks linear regression logistic regression multinomial regression","code":""},{"path":"https://tidymodels.github.io/brulee/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"High-Level Modeling Functions with torch","text":"can install released version brulee CRAN : development version GitHub :","code":"install.packages(\"brulee\") # install.packages(\"devtools\") devtools::install_github(\"tidymodels/brulee\")"},{"path":"https://tidymodels.github.io/brulee/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"High-Level Modeling Functions with torch","text":"brulee formula, x/y, recipe user interfaces function. example: recipe can also used data require sort preprocessing (e.g., indicator variables, transformations, standardization):","code":"library(brulee) library(recipes) library(yardstick)  data(bivariate, package = \"modeldata\") set.seed(20) nn_log_biv <- brulee_mlp(Class ~ log(A) + log(B), data = bivariate_train,                           epochs = 150, hidden_units = 3, batch_size = 64)  # We use the tidymodels semantics to always return a tibble when predicting predict(nn_log_biv, bivariate_test, type = \"prob\") %>%    bind_cols(bivariate_test) %>%    roc_auc(Class, .pred_One) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 roc_auc binary         0.608 library(recipes)  rec <-    recipe(Class ~ ., data = bivariate_train) %>%     step_YeoJohnson(all_numeric_predictors()) %>%    step_normalize(all_numeric_predictors())  set.seed(20) nn_rec_biv <- brulee_mlp(rec, data = bivariate_train,                           epochs = 150, hidden_units = 3, batch_size = 64)  # A little better predict(nn_rec_biv, bivariate_test, type = \"prob\") %>%    bind_cols(bivariate_test) %>%    roc_auc(Class, .pred_One) #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 roc_auc binary         0.865"},{"path":"https://tidymodels.github.io/brulee/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"High-Level Modeling Functions with torch","text":"Please note brulee project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot model loss over epochs — brulee-autoplot","title":"Plot model loss over epochs — brulee-autoplot","text":"Plot model loss epochs","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot model loss over epochs — brulee-autoplot","text":"","code":"# S3 method for brulee_mlp autoplot(object, ...)  # S3 method for brulee_logistic_reg autoplot(object, ...)  # S3 method for brulee_multinomial_reg autoplot(object, ...)  # S3 method for brulee_linear_reg autoplot(object, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot model loss over epochs — brulee-autoplot","text":"object brulee_mlp, brulee_logistic_reg, brulee_multinomial_reg, brulee_linear_reg object. ... currently used","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot model loss over epochs — brulee-autoplot","text":"ggplot object.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot model loss over epochs — brulee-autoplot","text":"function plots loss function across available epochs. vertical line shows epoch best loss value.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot model loss over epochs — brulee-autoplot","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {  library(ggplot2)  library(recipes)  theme_set(theme_bw())   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(1)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]   ames_rec <-   recipe(Sale_Price ~ Longitude + Latitude, data = ames_train) %>%     step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_mlp(ames_rec, data = ames_train, epochs = 50, batch_size = 32)   autoplot(fit) } #> Loading required package: dplyr #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union #>  #> Attaching package: ‘recipes’ #> The following object is masked from ‘package:stats’: #>  #>     step  # }"},{"path":"https://tidymodels.github.io/brulee/reference/brulee-coefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Model Coefficients — brulee-coefs","title":"Extract Model Coefficients — brulee-coefs","text":"Extract Model Coefficients","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-coefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Model Coefficients — brulee-coefs","text":"","code":"# S3 method for brulee_logistic_reg coef(object, epoch = NULL, ...)  # S3 method for brulee_linear_reg coef(object, epoch = NULL, ...)  # S3 method for brulee_mlp coef(object, epoch = NULL, ...)  # S3 method for brulee_multinomial_reg coef(object, epoch = NULL, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/brulee-coefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Model Coefficients — brulee-coefs","text":"object model fit brulee. epoch single integer training iteration. left NULL, estimates best model fit (via internal performance metrics). ... currently used.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-coefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Model Coefficients — brulee-coefs","text":"logistic/linear regression, named vector. neural networks, list arrays.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-coefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Model Coefficients — brulee-coefs","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(1)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]   # Using recipe  library(recipes)   ames_rec <-   recipe(Sale_Price ~ Longitude + Latitude, data = ames_train) %>%     step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_linear_reg(ames_rec, data = ames_train,                            epochs = 50, batch_size = 32)   coef(fit)  coef(fit, epoch = 1) } #> (Intercept)   Longitude    Latitude  #>  5.27084494 -0.04347723  0.12624538  # }"},{"path":"https://tidymodels.github.io/brulee/reference/brulee-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal functions and methods — brulee-internal","title":"Internal functions and methods — brulee-internal","text":"Internal functions methods","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee-internal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal functions and methods — brulee-internal","text":"","code":"# S3 method for brulee_mlp tunable(x, ...)  # S3 method for brulee_logistic_reg tunable(x, ...)  # S3 method for brulee_multinomial_reg tunable(x, ...)  # S3 method for brulee_linear_reg tunable(x, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/brulee-package.html","id":null,"dir":"Reference","previous_headings":"","what":"brulee: High-Level Modeling Functions with 'torch' — brulee-package","title":"brulee: High-Level Modeling Functions with 'torch' — brulee-package","text":"Provides high-level modeling functions define train models using 'torch' R package. Models include linear, logistic, multinomial regression well multilayer perceptrons.","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/reference/brulee-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"brulee: High-Level Modeling Functions with 'torch' — brulee-package","text":"Maintainer: Max Kuhn max@rstudio.com (ORCID) Authors: Daniel Falbel daniel@rstudio.com contributors: RStudio [copyright holder]","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear regression model — brulee_linear_reg","title":"Fit a linear regression model — brulee_linear_reg","text":"brulee_linear_reg() fits linear regression model.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear regression model — brulee_linear_reg","text":"","code":"brulee_linear_reg(x, ...)  # S3 method for default brulee_linear_reg(x, ...)  # S3 method for data.frame brulee_linear_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for matrix brulee_linear_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for formula brulee_linear_reg(   formula,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for recipe brulee_linear_reg(   x,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   stop_iter = 5,   verbose = FALSE,   ... )"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear regression model — brulee_linear_reg","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). predictor data standardized (e.g. centered scaled). ... currently used, required extensibility. y x data frame matrix, y outcome specified : data frame 1 numeric column. matrix 1 numeric column. numeric vector. epochs integer number epochs training. penalty amount weight decay (.e., L2 regularization). mixture Proportion Lasso Penalty (type: double, default: 0.0). value mixture = 1 corresponds pure lasso model, mixture = 0 indicates ridge regression (.k.weight decay). validation proportion data randomly assigned validation set. optimizer method used optimization procedure. Possible choices 'LBFGS' 'SGD'. Default 'LBFGS'. learn_rate positive number controls rapidity model moves along descent path. Values less 0.1 typical. (optimizer = \"SGD\" ) momentum positive number usually [0.50, 0.99] momentum parameter gradient descent.  (optimizer = \"SGD\" ) batch_size integer number training set points batch. stop_iter non-negative integer many iterations improvement stopping. verbose logical prints iteration history. formula formula specifying outcome term(s) left-hand side, predictor term(s) right-hand side. data recipe formula used, data specified : data frame containing predictors outcome.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a linear regression model — brulee_linear_reg","text":"brulee_linear_reg object elements: models_obj: serialized raw vector torch module. estimates: list matrices model parameter estimates per epoch. best_epoch: integer epoch smallest loss. loss: vector loss values (MSE) epoch. dim: list data dimensions. y_stats: list summary statistics numeric outcomes. parameters: list tuning parameter values. blueprint: hardhat blueprint data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a linear regression model — brulee_linear_reg","text":"function fits linear combination coefficients predictors model numeric outcome. training process optimizes mean squared error loss function. function internally standardizes outcome data mean zero standard deviation one. prediction function creates predictions original scale. default, training halts validation loss increases least step_iter iterations. validation = 0 training set loss used. predictors data numeric encoded units (e.g. standardized range distribution). factor predictors, use recipe formula create indicator variables (method) make numeric. Predictors units training. model objects saved epoch number epochs can efficiently tuned. coef() predict() methods model epoch argument (defaults epoch best loss value). use L1 penalty (.k.. lasso penalty) force parameters strictly zero (packages glmnet). zeroing parameters specific feature optimization method used packages.","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/reference/brulee_linear_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear regression model — brulee_linear_reg","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {   ## -----------------------------------------------------------------------------   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(122)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]    # Using matrices  set.seed(1)  brulee_linear_reg(x = as.matrix(ames_train[, c(\"Longitude\", \"Latitude\")]),                     y = ames_train$Sale_Price,                     penalty = 0.10, epochs = 1, batch_size = 64)   # Using recipe  library(recipes)   ames_rec <-   recipe(Sale_Price ~ Bldg_Type + Neighborhood + Year_Built + Gr_Liv_Area +          Full_Bath + Year_Sold + Lot_Area + Central_Air + Longitude + Latitude,          data = ames_train) %>%     # Transform some highly skewed predictors     step_BoxCox(Lot_Area, Gr_Liv_Area) %>%     # Lump some rarely occurring categories into \"other\"     step_other(Neighborhood, threshold = 0.05)  %>%     # Encode categorical predictors as binary.     step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%     # Add an interaction effect:     step_interact(~ starts_with(\"Central_Air\"):Year_Built) %>%     step_zv(all_predictors()) %>%     step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_linear_reg(ames_rec, data = ames_train,                            epochs = 5, batch_size = 32)  fit   autoplot(fit)   library(ggplot2)   predict(fit, ames_test) %>%    bind_cols(ames_test) %>%    ggplot(aes(x = .pred, y = Sale_Price)) +    geom_abline(col = \"green\") +    geom_point(alpha = .3) +    lims(x = c(4, 6), y = c(4, 6)) +    coord_fixed(ratio = 1)   library(yardstick)  predict(fit, ames_test) %>%    bind_cols(ames_test) %>%    rmse(Sale_Price, .pred)   } #> For binary classification, the first factor level is assumed to be the event. #> Use the argument `event_level = \"second\"` to alter this as needed. #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard      0.0999  # }"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a logistic regression model — brulee_logistic_reg","title":"Fit a logistic regression model — brulee_logistic_reg","text":"brulee_logistic_reg() fits model.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a logistic regression model — brulee_logistic_reg","text":"","code":"brulee_logistic_reg(x, ...)  # S3 method for default brulee_logistic_reg(x, ...)  # S3 method for data.frame brulee_logistic_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for matrix brulee_logistic_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for formula brulee_logistic_reg(   formula,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for recipe brulee_logistic_reg(   x,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a logistic regression model — brulee_logistic_reg","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). predictor data standardized (e.g. centered scaled). ... currently used, required extensibility. y x data frame matrix, y outcome specified : data frame 1 factor column (two levels). matrix 1 factor column (two levels). factor vector (two levels). epochs integer number epochs training. penalty amount weight decay (.e., L2 regularization). mixture Proportion Lasso Penalty (type: double, default: 0.0). value mixture = 1 corresponds pure lasso model, mixture = 0 indicates ridge regression (.k.weight decay). validation proportion data randomly assigned validation set. optimizer method used optimization procedure. Possible choices 'LBFGS' 'SGD'. Default 'LBFGS'. learn_rate positive number controls rapidity model moves along descent path. Values around 0.1 less typical. (optimizer = \"SGD\" ) momentum positive number usually [0.50, 0.99] momentum parameter gradient descent.  (optimizer = \"SGD\" ) batch_size integer number training set points batch. class_weights Numeric class weights (classification ). value can : named numeric vector (order) names outcome factor levels. unnamed numeric vector assumed order outcome factor levels. single numeric value least frequent class training data classes receive weight one. stop_iter non-negative integer many iterations improvement stopping. verbose logical prints iteration history. formula formula specifying outcome term(s) left-hand side, predictor term(s) right-hand side. data recipe formula used, data specified : data frame containing predictors outcome.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a logistic regression model — brulee_logistic_reg","text":"brulee_logistic_reg object elements: models_obj: serialized raw vector torch module. estimates: list matrices model parameter estimates per epoch. best_epoch: integer epoch smallest loss. loss: vector loss values (MSE regression, negative log- likelihood classification) epoch. dim: list data dimensions. parameters: list tuning parameter values. blueprint: hardhat blueprint data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a logistic regression model — brulee_logistic_reg","text":"function fits linear combination coefficients predictors model log odds classes. training process optimizes cross-entropy loss function (.k.Bernoulli loss). default, training halts validation loss increases least step_iter iterations. validation = 0 training set loss used. predictors data numeric encoded units (e.g. standardized range distribution). factor predictors, use recipe formula create indicator variables (method) make numeric. Predictors units training. model objects saved epoch number epochs can efficiently tuned. coef() predict() methods model epoch argument (defaults epoch best loss value). use L1 penalty (.k.. lasso penalty) force parameters strictly zero (packages glmnet). zeroing parameters specific feature optimization method used packages.","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/reference/brulee_logistic_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a logistic regression model — brulee_logistic_reg","text":"","code":"if (torch::torch_is_installed()) {   library(recipes)  library(yardstick)   ## -----------------------------------------------------------------------------  # increase # epochs to get better results   data(cells, package = \"modeldata\")   cells$case <- NULL   set.seed(122)  in_train <- sample(1:nrow(cells), 1000)  cells_train <- cells[ in_train,]  cells_test  <- cells[-in_train,]   # Using matrices  set.seed(1)  brulee_logistic_reg(x = as.matrix(cells_train[, c(\"fiber_width_ch_1\", \"width_ch_1\")]),                       y = cells_train$class,                       penalty = 0.10, epochs = 3)   # Using recipe  library(recipes)   cells_rec <-   recipe(class ~ ., data = cells_train) %>%   # Transform some highly skewed predictors   step_YeoJohnson(all_numeric_predictors()) %>%   step_normalize(all_numeric_predictors()) %>%   step_pca(all_numeric_predictors(), num_comp = 10)   set.seed(2)  fit <- brulee_logistic_reg(cells_rec, data = cells_train,                              penalty = .01, epochs = 5)  fit   autoplot(fit)   library(yardstick)  predict(fit, cells_test, type = \"prob\") %>%   bind_cols(cells_test) %>%   roc_auc(class, .pred_PS) } #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 roc_auc binary         0.867"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit neural networks — brulee_mlp","title":"Fit neural networks — brulee_mlp","text":"brulee_mlp() fits neural network models using stochastic gradient descent. Multiple layers can used.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit neural networks — brulee_mlp","text":"","code":"brulee_mlp(x, ...)  # S3 method for default brulee_mlp(x, ...)  # S3 method for data.frame brulee_mlp(   x,   y,   epochs = 100L,   hidden_units = 3L,   activation = \"relu\",   penalty = 0.001,   mixture = 0,   dropout = 0,   validation = 0.1,   learn_rate = 0.01,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for matrix brulee_mlp(   x,   y,   epochs = 100L,   hidden_units = 3L,   activation = \"relu\",   penalty = 0.001,   mixture = 0,   dropout = 0,   validation = 0.1,   learn_rate = 0.01,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for formula brulee_mlp(   formula,   data,   epochs = 100L,   hidden_units = 3L,   activation = \"relu\",   penalty = 0.001,   mixture = 0,   dropout = 0,   validation = 0.1,   learn_rate = 0.01,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for recipe brulee_mlp(   x,   data,   epochs = 100L,   hidden_units = 3L,   activation = \"relu\",   penalty = 0.001,   mixture = 0,   dropout = 0,   validation = 0.1,   learn_rate = 0.01,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit neural networks — brulee_mlp","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). predictor data standardized (e.g. centered scaled). ... currently used, required extensibility. y x data frame matrix, y outcome specified : data frame 1 column (numeric factor). matrix numeric column  (numeric factor).  vector  (numeric factor). epochs integer number epochs training. hidden_units integer number hidden units, vector integers. vector integers, model length(hidden_units) layers hidden_units[] hidden units. activation string activation function. Possible values \"relu\", \"elu\", \"tanh\", \"linear\". hidden_units vector, activation can character vector length equals length(hidden_units) specifying activation hidden layer. penalty amount weight decay (.e., L2 regularization). mixture Proportion Lasso Penalty (type: double, default: 0.0). value mixture = 1 corresponds pure lasso model, mixture = 0 indicates ridge regression (.k.weight decay). dropout proportion parameters set zero. validation proportion data randomly assigned validation set. learn_rate positive number controls rapidity model moves along descent path. Values around 0.1 less typical. momentum positive number usually [0.50, 0.99] momentum parameter gradient descent. batch_size integer number training set points batch. class_weights Numeric class weights (classification ). value can : named numeric vector (order) names outcome factor levels. unnamed numeric vector assumed order outcome factor levels. single numeric value least frequent class training data classes receive weight one. stop_iter non-negative integer many iterations improvement stopping. verbose logical prints iteration history. formula formula specifying outcome term(s) left-hand side, predictor term(s) right-hand side. data recipe formula used, data specified : data frame containing predictors outcome.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit neural networks — brulee_mlp","text":"brulee_mlp object elements: models_obj: serialized raw vector torch module. estimates: list matrices model parameter estimates per epoch. best_epoch: integer epoch smallest loss. loss: vector loss values (MSE regression, negative log- likelihood classification) epoch. dim: list data dimensions. y_stats: list summary statistics numeric outcomes. parameters: list tuning parameter values. blueprint: hardhat blueprint data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit neural networks — brulee_mlp","text":"function fits feed-forward neural network models regression (outcome number) classification (factor). regression, mean squared error optimized cross-entropy loss function classification. outcome number, function internally standardizes outcome data mean zero standard deviation one. prediction function creates predictions original scale. default, training halts validation loss increases least step_iter iterations. validation = 0 training set loss used. predictors data numeric encoded units (e.g. standardized range distribution). factor predictors, use recipe formula create indicator variables (method) make numeric. Predictors units training. model objects saved epoch number epochs can efficiently tuned. coef() predict() methods model epoch argument (defaults epoch best loss value). use L1 penalty (.k.. lasso penalty) force parameters strictly zero (packages glmnet). zeroing parameters specific feature optimization method used packages.","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/reference/brulee_mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit neural networks — brulee_mlp","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {   ## -----------------------------------------------------------------------------  # regression examples (increase # epochs to get better results)   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(122)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]    # Using matrices  set.seed(1)  fit <-    brulee_mlp(x = as.matrix(ames_train[, c(\"Longitude\", \"Latitude\")]),                y = ames_train$Sale_Price,                penalty = 0.10, batch_size = 2^8)   # Using recipe  library(recipes)   ames_rec <-   recipe(Sale_Price ~ Bldg_Type + Neighborhood + Year_Built + Gr_Liv_Area +          Full_Bath + Year_Sold + Lot_Area + Central_Air + Longitude + Latitude,          data = ames_train) %>%    # Transform some highly skewed predictors    step_BoxCox(Lot_Area, Gr_Liv_Area) %>%    # Lump some rarely occurring categories into \"other\"    step_other(Neighborhood, threshold = 0.05)  %>%    # Encode categorical predictors as binary.    step_dummy(all_nominal_predictors(), one_hot = TRUE) %>%    # Add an interaction effect:    step_interact(~ starts_with(\"Central_Air\"):Year_Built) %>%    step_zv(all_predictors()) %>%    step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_mlp(ames_rec, data = ames_train, hidden_units = 20,                     dropout = 0.05, batch_size = 2^8)  fit   autoplot(fit)   library(ggplot2)   predict(fit, ames_test) %>%    bind_cols(ames_test) %>%    ggplot(aes(x = .pred, y = Sale_Price)) +    geom_abline(col = \"green\") +    geom_point(alpha = .3) +    lims(x = c(4, 6), y = c(4, 6)) +    coord_fixed(ratio = 1)   library(yardstick)  predict(fit, ames_test) %>%    bind_cols(ames_test) %>%    rmse(Sale_Price, .pred)  } #> # A tibble: 1 × 3 #>   .metric .estimator .estimate #>   <chr>   <chr>          <dbl> #> 1 rmse    standard      0.0871   # ------------------------------------------------------------------------------  # classification   library(dplyr)  library(ggplot2)   data(\"parabolic\", package = \"modeldata\")   set.seed(1)  in_train <- sample(1:nrow(parabolic), 300)  parabolic_tr <- parabolic[ in_train,]  parabolic_te <- parabolic[-in_train,]   set.seed(2)  cls_fit <- brulee_mlp(class ~ ., data = parabolic_tr, hidden_units = 2,                         epochs = 200L, learn_rate = 0.1, activation = \"elu\",                         penalty = 0.1, batch_size = 2^8)  autoplot(cls_fit)    grid_points <- seq(-4, 4, length.out = 100)   grid <- expand.grid(X1 = grid_points, X2 = grid_points)   predict(cls_fit, grid, type = \"prob\") %>%   bind_cols(grid) %>%   ggplot(aes(X1, X2)) +   geom_contour(aes(z = .pred_Class1), breaks = 1/2, col = \"black\") +   geom_point(data = parabolic_te, aes(col = class))   # }"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a multinomial regression model — brulee_multinomial_reg","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"brulee_multinomial_reg() fits model.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"","code":"brulee_multinomial_reg(x, ...)  # S3 method for default brulee_multinomial_reg(x, ...)  # S3 method for data.frame brulee_multinomial_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for matrix brulee_multinomial_reg(   x,   y,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for formula brulee_multinomial_reg(   formula,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )  # S3 method for recipe brulee_multinomial_reg(   x,   data,   epochs = 20L,   penalty = 0.001,   mixture = 0,   validation = 0.1,   optimizer = \"LBFGS\",   learn_rate = 1,   momentum = 0,   batch_size = NULL,   class_weights = NULL,   stop_iter = 5,   verbose = FALSE,   ... )"},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"x Depending context: data frame predictors. matrix predictors. recipe specifying set preprocessing steps created recipes::recipe(). predictor data standardized (e.g. centered scaled). ... currently used, required extensibility. y x data frame matrix, y outcome specified : data frame 1 factor column (three levels). matrix 1 factor column (three levels). factor vector (three levels). epochs integer number epochs training. penalty amount weight decay (.e., L2 regularization). mixture Proportion Lasso Penalty (type: double, default: 0.0). value mixture = 1 corresponds pure lasso model, mixture = 0 indicates ridge regression (.k.weight decay). validation proportion data randomly assigned validation set. optimizer method used optimization procedure. Possible choices 'LBFGS' 'SGD'. Default 'LBFGS'. learn_rate positive number controls rapidity model moves along descent path. Values around 0.1 less typical. (optimizer = \"SGD\" ) momentum positive number usually [0.50, 0.99] momentum parameter gradient descent.  (optimizer = \"SGD\" ) batch_size integer number training set points batch. class_weights Numeric class weights (classification ). value can : named numeric vector (order) names outcome factor levels. unnamed numeric vector assumed order outcome factor levels. single numeric value least frequent class training data classes receive weight one. stop_iter non-negative integer many iterations improvement stopping. verbose logical prints iteration history. formula formula specifying outcome term(s) left-hand side, predictor term(s) right-hand side. data recipe formula used, data specified : data frame containing predictors outcome.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"brulee_multinomial_reg object elements: models_obj: serialized raw vector torch module. estimates: list matrices model parameter estimates per epoch. best_epoch: integer epoch smallest loss. loss: vector loss values (MSE regression, negative log- likelihood classification) epoch. dim: list data dimensions. parameters: list tuning parameter values. blueprint: hardhat blueprint data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"function fits linear combination coefficients predictors model log class probabilities. training process optimizes cross-entropy loss function. default, training halts validation loss increases least step_iter iterations. validation = 0 training set loss used. predictors data numeric encoded units (e.g. standardized range distribution). factor predictors, use recipe formula create indicator variables (method) make numeric. Predictors units training. model objects saved epoch number epochs can efficiently tuned. coef() predict() methods model epoch argument (defaults epoch best loss value). use L1 penalty (.k.. lasso penalty) force parameters strictly zero (packages glmnet). zeroing parameters specific feature optimization method used packages.","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/reference/brulee_multinomial_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a multinomial regression model — brulee_multinomial_reg","text":"","code":"if (torch::torch_is_installed()) {    library(recipes)   library(yardstick)    data(penguins, package = \"modeldata\")    penguins <- penguins %>% na.omit()    set.seed(122)   in_train <- sample(1:nrow(penguins), 200)   penguins_train <- penguins[ in_train,]   penguins_test  <- penguins[-in_train,]    rec <- recipe(island ~ ., data = penguins_train) %>%     step_dummy(species, sex) %>%     step_normalize(all_predictors())    set.seed(3)   fit <- brulee_multinomial_reg(rec, data = penguins_train, epochs = 5)   fit    predict(fit, penguins_test) %>%     bind_cols(penguins_test) %>%     conf_mat(island, .pred_class) } #>            Truth #> Prediction  Biscoe Dream Torgersen #>   Biscoe        49     2         3 #>   Dream         11    38         6 #>   Torgersen      9     8         7"},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert data to torch format — matrix_to_dataset","title":"Convert data to torch format — matrix_to_dataset","text":"x/y interface, matrix_to_dataset() converts data proper encodings formats results consumption torch.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert data to torch format — matrix_to_dataset","text":"","code":"matrix_to_dataset(x, y)"},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert data to torch format — matrix_to_dataset","text":"x numeric matrix predictors. y vector. regression y numeric. classification, factor.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert data to torch format — matrix_to_dataset","text":"R6 index sampler object classes \"training_set\", \"dataset\", \"R6\".","code":""},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert data to torch format — matrix_to_dataset","text":"Missing values removed passing data function.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/matrix_to_dataset.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert data to torch format — matrix_to_dataset","text":"","code":"if (torch::torch_is_installed()) {   matrix_to_dataset(as.matrix(mtcars[, -1]), mtcars$mpg) } #> <tensor_dataset> #>   Inherits from: <dataset> #>   Public: #>     .getbatch: function (index)  #>     .getitem: function (index)  #>     .length: function ()  #>     clone: function (deep = FALSE)  #>     initialize: function (...)  #>     tensors: list"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_linear_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","title":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","text":"Predict brulee_linear_reg","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_linear_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","text":"","code":"# S3 method for brulee_linear_reg predict(object, new_data, type = NULL, epoch = NULL, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_linear_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","text":"object brulee_linear_reg object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"numeric\" numeric predictions. epoch integer epoch make predictions. value larger maximum number fit, warning issued parameters last epoch used. left NULL, epoch associated smallest loss used. ... used, required extensibility.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_linear_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","text":"tibble predictions. number rows tibble guaranteed number rows new_data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_linear_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a brulee_linear_reg — predict.brulee_linear_reg","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(1)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]   # Using recipe  library(recipes)   ames_rec <-   recipe(Sale_Price ~ Longitude + Latitude, data = ames_train) %>%     step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_linear_reg(ames_rec, data = ames_train,                            epochs = 50, batch_size = 32)   predict(fit, ames_test) } #> # A tibble: 930 × 1 #>    .pred #>    <dbl> #>  1  5.27 #>  2  5.37 #>  3  5.37 #>  4  5.33 #>  5  5.33 #>  6  5.30 #>  7  5.30 #>  8  5.30 #>  9  5.31 #> 10  5.29 #> # … with 920 more rows # }"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_logistic_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","title":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","text":"Predict brulee_logistic_reg","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_logistic_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","text":"","code":"# S3 method for brulee_logistic_reg predict(object, new_data, type = NULL, epoch = NULL, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_logistic_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","text":"object brulee_logistic_reg object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"class\" hard class predictions \"prob\" soft class predictions (.e., class probabilities) epoch integer epoch make predictions. value larger maximum number fit, warning issued parameters last epoch used. left NULL, epoch associated smallest loss used. ... used, required extensibility.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_logistic_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","text":"tibble predictions. number rows tibble guaranteed number rows new_data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_logistic_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a brulee_logistic_reg — predict.brulee_logistic_reg","text":"","code":"if (torch::torch_is_installed()) {    library(recipes)   library(yardstick)    data(penguins, package = \"modeldata\")    penguins <- penguins %>% na.omit()    set.seed(122)   in_train <- sample(1:nrow(penguins), 200)   penguins_train <- penguins[ in_train,]   penguins_test  <- penguins[-in_train,]    rec <- recipe(sex ~ ., data = penguins_train) %>%     step_dummy(all_nominal_predictors()) %>%     step_normalize(all_numeric_predictors())    set.seed(3)   fit <- brulee_logistic_reg(rec, data = penguins_train, epochs = 5)   fit    predict(fit, penguins_test)    predict(fit, penguins_test, type = \"prob\") %>%     bind_cols(penguins_test) %>%     roc_curve(sex, .pred_female) %>%     autoplot()  }"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_mlp.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a brulee_mlp — predict.brulee_mlp","title":"Predict from a brulee_mlp — predict.brulee_mlp","text":"Predict brulee_mlp","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_mlp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a brulee_mlp — predict.brulee_mlp","text":"","code":"# S3 method for brulee_mlp predict(object, new_data, type = NULL, epoch = NULL, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_mlp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a brulee_mlp — predict.brulee_mlp","text":"object brulee_mlp object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"numeric\" numeric predictions. \"class\" hard class predictions \"prob\" soft class predictions (.e., class probabilities) epoch integer epoch make predictions. value larger maximum number fit, warning issued parameters last epoch used. left NULL, epoch associated smallest loss used. ... used, required extensibility.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_mlp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a brulee_mlp — predict.brulee_mlp","text":"tibble predictions. number rows tibble guaranteed number rows new_data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_mlp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a brulee_mlp — predict.brulee_mlp","text":"","code":"# \\donttest{ if (torch::torch_is_installed()) {  # regression example:   data(ames, package = \"modeldata\")   ames$Sale_Price <- log10(ames$Sale_Price)   set.seed(1)  in_train <- sample(1:nrow(ames), 2000)  ames_train <- ames[ in_train,]  ames_test  <- ames[-in_train,]   # Using recipe  library(recipes)   ames_rec <-   recipe(Sale_Price ~ Longitude + Latitude, data = ames_train) %>%     step_normalize(all_numeric_predictors())   set.seed(2)  fit <- brulee_mlp(ames_rec, data = ames_train, epochs = 50, batch_size = 32)   predict(fit, ames_test) } #> # A tibble: 930 × 1 #>    .pred #>    <dbl> #>  1  5.16 #>  2  5.28 #>  3  5.28 #>  4  5.22 #>  5  5.27 #>  6  5.25 #>  7  5.20 #>  8  5.20 #>  9  5.22 #> 10  5.21 #> # … with 920 more rows # }"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_multinomial_reg.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","title":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","text":"Predict brulee_multinomial_reg","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_multinomial_reg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","text":"","code":"# S3 method for brulee_multinomial_reg predict(object, new_data, type = NULL, epoch = NULL, ...)"},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_multinomial_reg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","text":"object brulee_multinomial_reg object. new_data data frame matrix new predictors. type single character. type predictions generate. Valid options : \"class\" hard class predictions \"prob\" soft class predictions (.e., class probabilities) epoch integer epoch make predictions. value larger maximum number fit, warning issued parameters last epoch used. left NULL, epoch associated smallest loss used. ... used, required extensibility.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_multinomial_reg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","text":"tibble predictions. number rows tibble guaranteed number rows new_data.","code":""},{"path":"https://tidymodels.github.io/brulee/reference/predict.brulee_multinomial_reg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict from a brulee_multinomial_reg — predict.brulee_multinomial_reg","text":"","code":"if (torch::torch_is_installed()) {    library(recipes)   library(yardstick)    data(penguins, package = \"modeldata\")    penguins <- penguins %>% na.omit()    set.seed(122)   in_train <- sample(1:nrow(penguins), 200)   penguins_train <- penguins[ in_train,]   penguins_test  <- penguins[-in_train,]    rec <- recipe(island ~ ., data = penguins_train) %>%     step_dummy(species, sex) %>%     step_normalize(all_numeric_predictors())    set.seed(3)   fit <- brulee_multinomial_reg(rec, data = penguins_train, epochs = 5)   fit    predict(fit, penguins_test) %>%     bind_cols(penguins_test) %>%     conf_mat(island, .pred_class) } #>            Truth #> Prediction  Biscoe Dream Torgersen #>   Biscoe        49     2         3 #>   Dream         11    38         6 #>   Torgersen      9     8         7"},{"path":"https://tidymodels.github.io/brulee/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% generics tunable ggplot2 autoplot stats coef","code":""},{"path":[]},{"path":"https://tidymodels.github.io/brulee/news/index.html","id":"brulee-010","dir":"Changelog","previous_headings":"","what":"brulee 0.1.0","title":"brulee 0.1.0","text":"Modeling functions gained mixture argument proportion L1 penalty used. (#50) Penalization occurring quasi-Newton optimization chosen. (#50)","code":""},{"path":"https://tidymodels.github.io/brulee/news/index.html","id":"brulee-001","dir":"Changelog","previous_headings":"","what":"brulee 0.0.1","title":"brulee 0.0.1","text":"CRAN release: 2021-12-15 First CRAN release.","code":""}]
